{
  "swagger": "2.0",
  "info": {
    "description": "Auto Mart is an online marketplace for automobiles of diverse makes, model or body type. With Auto Mart, users can sell their cars or buy from trusted dealerships or private sellers.",
    "version": "1.0.0",
    "title": "AutoMart API",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "nonsoamadi@aol.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "localhost:8000",
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "Users",
      "description": "API Endpoints for registered users in the Application"
    },
    {
      "name": "Cars",
      "description": "API Endpoints for Car Adverts created by Users in the Application"
    },
    {
      "name": "Orders",
      "description": "API Endpoints for Orders created by  Users in the Application"
    },
    {
      "name": "flags",
      "description": "API endpoints for Car advert reported by Users of this application"
    }
  ],
  "schemes": [
    "https",
    "http"
  ],
  "paths": {
    "/auth/signup": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Registers a new user in the application",
        "description": "",
        "operationId": "signupNewUser",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User object that needs to be registered in the application",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "409": {
            "description": "User already exist"
          },
          "201": {
            "description": "Sign up was successful"
          }
        }
      }
    },
    "/auth/signin": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Signin a user with existing user credentials",
        "description": "",
        "operationId": "loginExistingUser",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User object credentials that needs to sign in",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Login"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "No User exist"
          },
          "400": {
            "description": "Bad request || Invalid user credentials"
          },
          "200": {
            "description": "You are successfully logged in"
          }
        }
      }
    },
    "/Car": {
      "get": {
        "tags": [
          "Cars"
        ],
        "summary": "Get all Cars whether sold or unsold",
        "description": "N.B Only an admin can perform this operation",
        "operationId": "getAlladverts",
        "produces": [
          "application/xml",
          "application/json"
        ],
        
        "responses": {
          "401": {
              "description": "Uauthorized - Specify a JWT Authorization token in the header"
          },
          "403": {
            "description": "Only admins can use this route"
          },
          
          "201": {
              "description": "Successfully created a car advert"
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "post": {
        "tags": [
          "Cars"
        ],
        "summary": "Create a car Advert",
        "description": "",
        "operationId": "PostanAdvert",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [

          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User object credentials that are required for sign in",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostaCarAdvert"
            }
          }
        ],
        "responses": {
          "401": {
              "description": "Uauthorized - Specify a JWT Authorization token in the header"
          },
          "422": {
            "description": "Empty or invalid Input fields"
          },
          "201": {
            "description": "Successfully Created an Advert"
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/car/:carId/status": {
      "parameters": [
        {
          "name": "carId",
          "in": "path",
          "description": "Identification number of the Car we want to update",
          "required": true,
          "type": "integer"
        }
        ],
      "patch": {
        "tags": [
          "Cars"
        ],
        "summary": "Update a Car Advert Status",
        "description": "N.B - Only a logged in User can perform this operation",
        "operationId": "patchStatusByCarId",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Specify a Car Advert status (sold, available)",
            "schema": {
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "type": "string",
                  "example": "sold"
                }
              }
            }
          }
        ],
        "responses": {
          "401": {
              "description": "Uauthorized - Specify a JWT Authorization token in the header"
          },
          "404": {
            "description": "Car does not exist"
          },
          "422": {
            "description": "Validation error"
          },
          "200": {
            "description": "Status was successfully updated"
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
      
    },
    "/car/:carId/price": {
      "parameters": [
        {
          "name": "carId",
          "in": "path",
          "description": "Identification number of the Car we want to update",
          "required": true,
          "type": "integer"
        }
        ],
      "patch": {
        "tags": [
          "Cars"
        ],
        "summary": "Update a the price of a posted Car advert",
        "description": "N.B - Only a logged in User can perform this operation",
        "operationId": "patchPriceByCarId",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Specify a Car Advert price",
            "schema": {
              "type": "object",
              "required": [
                "price"
              ],
              "properties": {
                "price": {
                  "type": "Float",
                  "example": "200.00"
                }
              }
            }
          }
        ],
        "responses": {
          "401": {
              "description": "Uauthorized - Specify a JWT Authorization token in the header"
          },
          "404": {
            "description": "Car does not exist"
          },
          "422": {
            "description": "Validation error"
          },
          "200": {
            "description": "Price was successfully updated",
            "schema":{
              "type":"object",
                "$ref":"#/definitions/Car"
              
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/car/:carId":{
      "parameters": [
        {
          "name": "carId",
          "in": "path",
          "description": "Identification number of the Car we want to find",
          "required": true,
          "type": "integer"
        }
        ],
      "get": {
        "tags": [
          "Cars"
        ],
        "summary": "Get a Car by Id",
        "description": "",
        "operationId": "getCarbyId",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Car not found"
          },
          "401": {
            "description": "Uauthorized - Specify a JWT Authorization token in the header"
            },
          "200": {
            "description": "Car successfully retrieved"
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/car?status=available":{
      "parameters":[
        {
          "name": "status",
          "in":"header",
          "description": "Cars that are unsold",
          "required": true,
          "type":"string"
        }
      ],
      "get": {
        "tags": [
          "Cars"
        ],
        "summary": "getallUnsoldCars.",
        "description": "",
        "operationId": "allUnsoldCars",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        
        "responses": {
          "404": {
            "description": "No Car found"
          },
          "401": {
            "description": "Uauthorized - Specify a JWT Authorization token in the header"
            },
          "422": {
            "description": "Validation Error"
          },
          "200": {
            "description": "Car was successfully retrieved",
            "schema":{
             "type": "array",
               "$ref": "#/definitions/Car"
             
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/car?status=available&min_price=XXX_value&max_price=XXX_value":{
      "get": {
        "tags": [
          "Cars"
        ],
        "summary": "Get unsold cars within a price range",
        "description": "",
        "operationId": "unsoldCarsWithinPrice",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "status",
            "description": "status of the car we want to search for",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "min_price",
            "description": "minimum price of the car we want to search for",
            "required": true,
            "type": "float"
            
          },
          {
            "in": "path",
            "name": "max_price",
            "description": "maximum price of the car we want to search for",
            "required": true,
            "type": "float"
          }
        ],
        "responses": {
          "401": {
            "description": "Uauthorized - Specify a JWT Authorization token in the header"
            },
          "404": {
            "description": "Car not found"
          },
          "422": {
            "description": "Validation Error"
          },
          "200": {
            "description": "Car successfully retrieved"
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/car/<:carId>": {
      "delete": {
        "tags": [
          "Cars"
        ],
        "summary": "Delete a specific car advert",
        "description": "N.B - Admin can only delete a specific advert",
        "operationId": "userDelete",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "carId",
            "in": "path",
            "description": "Car Id of the number we want to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "401": {
              "description": "Uauthorized - Specify a JWT Authorization token in the header"
          },
          "403": {
            "description": "User is not permitted to perform this operation"
          },
          "404": {
              "description": "Car doesn't exist"
          },
          "200": {
              "description": "Car Ad successfully deleted"
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/order":{
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Make a car Order",
        "description": "N.B - a logged IUser can perform this operation",
        "operationId": "makeOrder",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Enter Order details",
            "required": true,
            "schema":{
              "type":"object",
              "$ref":"#/definitions/Order"
            }
          }
        ],
        "responses": {
          "422": {
            "description": "Validation Error"
          },
          "401": {
              "description": "Uauthorized - Specify a JWT Authorization token in the header"
          },
          "404": {
              "description": "car does not exist"
          },
          "200": {
              "description": "Order successfully made",
              "schema": {
                "type":"object",
                  "$ref":"#/definitions/Orders"
              }
          }

        

          

          
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/order/:orderId/price": {
      "patch":{
        "tags": [
          "Orders"
        ],
        "summary": "Update the price of a car order",
        "description": "N.B - Only a logged in User can perform this operation",
        "operationId": "updateOrderPrice",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Id of the order placed",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "carId",
            "in": "body",
            "description": "Id of the vehicle you want to order",
            "schema": {
              "type": "object",
              "required": [
                "carId"
              ],
              "properties": {
                "carId": {
                  "type": "integer",
                  "example": 2
                }
              }
            }
          }, 
          {
            "name": "price",
            "in": "body",
            "description": "New price offered for the vehicle purchase",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "price"
              ],
              "properties": {
                "price": {
                  "type": "Float",
                  "example": "200.00"
                }
              }
            }
          }
        ],
        "responses": {
          "422": {
            "description": "Validation Error"
          },
          "401": {
              "description": "Uauthorized - Specify a JWT Authorization token in the header"
          },
          "404": {
              "description": "car does not exist"
          },
          "200": {
              "description": "Order successfully made",
              "schema": {
                "type":"object",
                "required":[
                  "id",
                  "carId",
                  "buyerId",
                  "status",
                  "oldOffer",
                  "newOffer"
                ],
                "properties": {
                  "id":{
                    "type": "integer",
                    "example": 1
                  },
                  "carId":{
                    "type":"integer",
                    "example": 3
                  },
                  "buyerId": {
                    "type":"integer",
                    "example": 1
                  },
                  "status": {
                    "type":"string",
                    "example": "pending"
                  },
                  "oldOffer": {
                    "type":"float",
                    "example": 1000.00
                  },
                  "newOffer": {
                    "type":"float",
                    "example":200.00
                  }
                }
              }
          }

        

          

          
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/flag": {
      "post":{
        "tags": [
          "flags"
        ],
        "summary": "Report a car advert",
        "description": "N.B - Only a logged in User can perform this operation",
        "operationId": "flaganAd",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "carId",
            "in": "body",
            "description": "Id of the car advert",
            "schema":{
              "required": true,
            "type": "integer",
            "format": "int64",
            "properties":{
              "carId":{
            "type": "integer",
            "format": "int64",
            "example": 1
              }
            }
            }
          },
          {
            "name": "Reason",
            "in": "body",
            "description": "Reason for flagging the advert",
            "schema": {
              "type": "object",
              "required": [
                "Reason"
              ],
              "properties": {
                "reason": {
                  "type": "string",
                  "example": "abnormal demands"
                }
              }
            }
          }, 
          {
            "name": "description",
            "in": "body",
            "description": "Description of the report",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "descrption"
              ],
              "properties": {
                "description": {
                  "type": "string",
                  "example": "Made negotiations successfully, seller still increased price"
                }
              }
            }
          }
        ],
        "responses": {
          "422": {
            "description": "Validation Error"
          },
          "401": {
              "description": "Uauthorized - Specify a JWT Authorization token in the header"
          },
          "404": {
              "description": "car does not exist"
          },
          "200": {
              "description": "Report successfully made",
              "schema": {
                "type":"object",
                "required":[
                  "id",
                  "carId",
                  "reason",
                  "description"
                ],
                "properties": {
                  "id":{
                    "type": "integer",
                    "example": 1
                  },
                  "carId":{
                    "type":"integer",
                    "example": 3
                  },
                  "reason": {
                    "type":"string",
                    "example": "abnormal demands"
                  },
                  "description": {
                    "type":"string",
                    "example": "Seller charges unreasonably"
                  }
                }
              }
          }

        

          

          
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    }
    
  },
  "securityDefinitions": {
    "Authorization": {
      "type": "JSON Web Token",
      "scheme": "Bearer",
      "description": "JWT token is received upon user successful login, input format: \"Bearer \\<token\\>\"",
      "name": "bearerAuth",
      "in": "header",
      "bearerFormat": "Bearer token"
  }
  },
  "definitions": {

    "PostaCarAdvert":{
      "type": "object",
      "properties": {
        "manufacturer": {
          "type": "string",
          "example": "Toyota"
        },
        "model": {
          "type": "string",
          "example": "corolla"
        },
        "state": {
          "type":"string",
          "example": "new"
        },
        "price": {
          "type":"float",
          "example": "1000.00"
        },
        "bodyType": {
          "type":"string",
          "example": "car"
        },
        "photo": {
          "type":"string",
          "example": "cars.jpg"
        }
      },
      "xml": {
        "name": "CreateAccount"
      }
    },

    "Login": {
      "type": "object",
      "required": [
        "email",
        "password"
      ],
      "properties": {
        "email": {
          "type": "string",
          "format": "email",
          "example": "busola@gmail.com"
        },
        "password": {
          "type": "string",
          "example": "Thunder"
        }
      },
      "xml": {
        "name": "Login"
      }
    },
    "Car": {
      "type": "object",
       "required": [
         "id",
         "email",
         "manufacturer",
         "model",
         "bodyType",
         "state",
         "status",
         "imageUrl",
         "price"
       ],

       "properties":{
         "id": {
           "type": "integer",
           "example": 1
         },
         "email": {
           "type":"string",
           "example": "Nonsoamadi@gmail.com"
         },
         "manufacturer": {
           "type": "string",
           "example": "Toyota"
         },
         "model": {
           "type": "string",
           "example": "corolla"
         },
         "state": {
           "type": "string",
           "example": "new"
         },
         "status": {
           "type": "string",
           "example": "available"
         },
         "price": {
           "type": "float",
           "example": 12000.00
         },
         "imageUrl": {
           "type": "string",
           "example": "cars.jpg"
         }

       },
       "xml": {
         "name": "Car"
       }
    },
    "User": {
      "type": "object",
      "required": [
        "firstname",
        "lastname",
        "email",
        "password",
        "is_admin"
      ],
      "properties": {
        "firstname": {
          "type": "string",
          "example": "Nonso"
        },
        "lastname": {
          "type": "string",
          "example": "Amadi"
        },
        "email": {
          "type": "string",
          "format": "email",
          "example": "amadi@email.com"
        },
        "password": {
          "type": "string",
          "example": "grace"
        },
        "is_admin": {
          "type": "boolean",
          "example": true
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "Admin": {
      "type": "object",
      "required": [
        "firstname",
        "lastname",
        "email",
        "password",
        "is_admin"
      ],
      "properties": {
        "firstname": {
          "type": "string",
          "example": "Busola"
        },
        "lastname": {
          "type": "string",
          "example": "Ogunsemore"
        },
        "email": {
          "type": "string",
          "format": "email",
          "example": "busola@email.com"
        },
        "password": {
          "type": "string",
          "example": "Thunder"
        },
        "is_admin": {
          "type": "boolean",
          "example": true
        }
      },
      "xml": {
        "name": "Admin"
      }
    },

    "Orders":{
     "type":"object",
     "required": [
       "id",
       "carId",
       "price",
       "createdOn",
       "priceOffered"
     ],
     "properties": {
       "id":{
         "type": "integer",
         "example": 1,
         "format":"int64"
       },
       "carId":{
         "type": "integer",
         "example": 2,
         "format":"int64"
       },
       "price": {
         "type":"integer",
         "example": 200.00
       },
       "priceOffered": {
         "type": "integer",
         "example": 1000.00
       },
       "createdOn": {
         "type": "datetime",
         "example": "27/3/12 10:00pm"
       }
     },
     "xml":{
      "name": "Orders"
     }
    },
    "Order":{
      "type":"object",
      "required": [
        "carId",
        "priceOffered"
      ],
      "properties": {
        "carId":{
          "type": "integer",
          "example": 2,
          "format":"int64"
        },
        "priceOffered": {
          "type": "integer",
          "example": 1000.00
        }
        
      },
      "xml":{
       "name": "Order"
      }
     }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}